From oadt Require Import prelude.

(** The core language for oblivious algebraic data type. *)

Module oadt.

Section lang.

Context `{is_atom : Atom atom amap aset}.
Implicit Types (x X : atom) (L : aset).

Open Scope type_scope.

(** * Syntax *)

(** ** Expressions (e, œÑ) *)
Inductive expr :=
(** Variables *)
| EBVar (k : nat)
| EFVar (x : atom)
| EGVar (x : atom)
(** Expressions with binders *)
| EPi (œÑ1 œÑ2: expr)
| EAbs (œÑ e : expr)
| ELet (e1 e2 : expr)
| ECase (e0 : expr) (e1 : expr) (e2 : expr)
| EOCase (e0 : expr) (e1 : expr) (e2 : expr)
(** Types *)
| EUnitT
| EBool
| EOBool
| EProd (œÑ1 œÑ2 : expr)
| ESum (œÑ1 œÑ2 : expr)
| EOSum (œÑ1 œÑ2 : expr)
(** Other expressions *)
| EApp (e1 e2 : expr)
| EUnitV
| ELit (b : bool)
| ESec (e : expr)
| ERet (e : expr)
| EIte (e0 e1 e2 : expr)
| EMux (e0 e1 e2 : expr)
| EPair (e1 e2 : expr)
| EProj (b : bool) (e : expr)
| EInj (b : bool) (œÑ e : expr)
| EOInj (b : bool) (œÑ e : expr)
| EFold (X : atom) (e : expr)
| EUnfold (X : atom) (e : expr)
(** Runtime expressions *)
| EBoxedLit (b : bool)
| EBoxedOInj (b : bool) (œÑ e : expr)
.

(** ** GLobal definitions (D) *)
Variant gdef :=
| DADT (e : expr)
| DOADT (œÑ e : expr)
| DFun (œÑ e : expr)
.

(** ** Global named definitions (Ds) *)
Definition gdefs := list (atom * gdef).

(** ** Programs (P) *)
Definition program := gdefs * expr.

(** ** Global context (Œ£) *)
(** It is used in operational semantics and typing. *)
Notation gctx := (amap gdef).

(** ** Notations *)
(* TODO: allow them to be used outside of this section. *)

(* Adapted from _Software Foundations_. *)
Coercion ELit : bool >-> expr.
Coercion EBVar : nat >-> expr.
Coercion EGVar : atom >-> expr.

Declare Scope oadt_scope.
Delimit Scope oadt_scope with oadt.

Declare Custom Entry oadt.
Notation "<{ e }>" := e (e custom oadt at level 99).
Notation "( x )" := x (in custom oadt, x at level 99).
Notation "x" := x (in custom oadt at level 0, x constr at level 0).
Notation "'ùüô'" := EUnitT (in custom oadt at level 0).
Notation "'Unit'" := EUnitT (in custom oadt at level 0, only parsing).
Notation "'ùîπ'" := EBool (in custom oadt at level 0).
Notation "'Bool'" := EBool (in custom oadt at level 0, only parsing).
Notation "'~ùîπ'" := EOBool (in custom oadt at level 0).
Notation "'~Bool'" := EOBool (in custom oadt at level 0, only parsing).
Notation "œÑ1 * œÑ2" := (EProd œÑ1 œÑ2) (in custom oadt at level 2,
                                        œÑ1 custom oadt,
                                        œÑ2 custom oadt at level 0).
Notation "œÑ1 + œÑ2" := (ESum œÑ1 œÑ2) (in custom oadt at level 3,
                                       left associativity).
Notation "œÑ1 ~+ œÑ2" := (EOSum œÑ1 œÑ2) (in custom oadt at level 3,
                                         left associativity).
Notation "'Œ†' : œÑ1 , œÑ2" := (EPi œÑ1 œÑ2) (in custom oadt at level 50,
                                            right associativity,
                                            format "Œ† : œÑ1 ,  œÑ2").
Notation "\ : œÑ '=>' e" := (EAbs œÑ e) (in custom oadt at level 90,
                                          œÑ custom oadt at level 99,
                                          e custom oadt at level 99,
                                          left associativity,
                                          format "\ : œÑ  =>  e").
Notation "e1 e2" := (EApp e1 e2) (in custom oadt at level 1, left associativity).
Notation "()" := EUnitV (in custom oadt at level 0).
Notation "( x , y , .. , z )" := (EPair .. (EPair x y) .. z)
                                   (in custom oadt at level 0,
                                       x custom oadt at level 99,
                                       y custom oadt at level 99,
                                       z custom oadt at level 99).
Notation "'œÄ@' b e" := (EProj b e) (in custom oadt at level 0,
                                       b constr at level 0,
                                       e custom oadt at level 0,
                                       format "œÄ@ b  e").
Notation "'œÄ1' e" := (EProj true e) (in custom oadt at level 0,
                                        e custom oadt at level 0).
Notation "'œÄ2' e" := (EProj false e) (in custom oadt at level 0,
                                         e custom oadt at level 0).
Notation "'sùîπ' e" := (ESec e) (in custom oadt at level 0,
                                  e custom oadt at level 0).
Notation "'rùîπ' e" := (ERet e) (in custom oadt at level 0,
                                  e custom oadt at level 0).
Notation "'if' e0 'then' e1 'else' e2" := (EIte e0 e1 e2)
                                            (in custom oadt at level 89,
                                                e0 custom oadt at level 99,
                                                e1 custom oadt at level 99,
                                                e2 custom oadt at level 99,
                                                left associativity).
Notation "'mux' e0 e1 e2" := (EMux e0 e1 e2) (in custom oadt at level 0,
                                                 e0 custom oadt at level 0,
                                                 e1 custom oadt at level 0,
                                                 e2 custom oadt at level 0).
Notation "'let' e1 'in' e2" := (ELet e1 e2)
                                 (in custom oadt at level 0,
                                     e1 custom oadt at level 99,
                                     e2 custom oadt at level 99).
Notation "'inj@' b < œÑ > e" := (EInj b œÑ e) (in custom oadt at level 0,
                                                b constr at level 0,
                                                œÑ custom oadt at level 0,
                                                e custom oadt at level 0,
                                                format "inj@ b < œÑ >  e").
Notation "'inl' < œÑ > e" := (EInj true œÑ e) (in custom oadt at level 0,
                                                œÑ custom oadt at level 0,
                                                e custom oadt at level 0,
                                                format "inl < œÑ >  e").
Notation "'inr' < œÑ > e" := (EInj false œÑ e) (in custom oadt at level 0,
                                                 œÑ custom oadt at level 0,
                                                 e custom oadt at level 0,
                                                 format "inr < œÑ >  e").
Notation "'~inj@' b < œÑ > e" := (EOInj b œÑ e) (in custom oadt at level 0,
                                                  b constr at level 0,
                                                  œÑ custom oadt at level 0,
                                                  e custom oadt at level 0,
                                                  format "~inj@ b < œÑ >  e").
Notation "'~inl' < œÑ > e" := (EOInj true œÑ e) (in custom oadt at level 0,
                                                  œÑ custom oadt at level 0,
                                                  e custom oadt at level 0,
                                                  format "~inl < œÑ >  e").
Notation "'~inr' < œÑ > e" := (EOInj false œÑ e) (in custom oadt at level 0,
                                                   œÑ custom oadt at level 0,
                                                   e custom oadt at level 0,
                                                   format "~inr < œÑ >  e").
Notation "'case' e0 'of' e1 '|' e2" :=
  (ECase e0 e1 e2) (in custom oadt at level 89,
                       e0 custom oadt at level 99,
                       e1 custom oadt at level 99,
                       e2 custom oadt at level 99,
                       left associativity).
Notation "'~case' e0 'of' e1 '|' e2" :=
  (EOCase e0 e1 e2) (in custom oadt at level 89,
                        e0 custom oadt at level 99,
                        e1 custom oadt at level 99,
                        e2 custom oadt at level 99,
                        left associativity).
Notation "'fold' < X > e" := (EFold X e) (in custom oadt at level 0,
                                             X custom oadt at level 0,
                                             e custom oadt at level 0,
                                             format "fold < X >  e").
Notation "'unfold' < X > e" := (EUnfold X e) (in custom oadt at level 0,
                                                 X custom oadt at level 0,
                                                 e custom oadt at level 0,
                                                 format "unfold < X >  e").
Notation "[ b ]" := (EBoxedLit b) (in custom oadt at level 0,
                                      b constr at level 0).
Notation "[ 'inj@' b < œÑ > e ]" := (EBoxedOInj b œÑ e)
                                      (in custom oadt at level 0,
                                          b constr at level 0,
                                          œÑ custom oadt at level 0,
                                          e custom oadt at level 0,
                                          format "[ inj@ b < œÑ >  e ]").
Notation "[ 'inl' < œÑ > e ]" := (EBoxedOInj true œÑ e)
                                   (in custom oadt at level 0,
                                       œÑ custom oadt at level 0,
                                       e custom oadt at level 0,
                                       format "[ inl < œÑ >  e ]").
Notation "[ 'inr' < œÑ > e ]" := (EBoxedOInj false œÑ e)
                                   (in custom oadt at level 0,
                                       œÑ custom oadt at level 0,
                                       e custom oadt at level 0,
                                       format "[ inr < œÑ >  e ]").

Declare Custom Entry oadt_def.
Notation "'data' X := e" := (X, DADT e) (in custom oadt_def at level 0,
                                            X constr at level 0,
                                            e custom oadt at level 99).
Notation "'obliv' X ( : œÑ ) := e" := (X, DOADT œÑ e)
                                       (in custom oadt_def at level 0,
                                           X constr at level 0,
                                           œÑ custom oadt at level 99,
                                           e custom oadt at level 99,
                                           format "obliv  X  ( : œÑ )  :=  e").
Notation "'def' x : œÑ := e" := (x, DFun œÑ e) (in custom oadt_def at level 0,
                                                 x constr at level 0,
                                                 œÑ custom oadt at level 99,
                                                 e custom oadt at level 99).
Notation "[{ x }]" := (cons x nil)
                        (x custom oadt_def at level 99).
Notation "[{ x ; y ; .. ; z }]" := (cons x (cons y .. (cons z nil) ..))
                                     (x custom oadt_def at level 99,
                                      y custom oadt_def at level 99,
                                      z custom oadt_def at level 99,
                                      format "[{ '[v  ' '/' x ; '/' y ; '/' .. ; '/' z ']' '//' }]").

(** * Examples *)
(* Axiom ‚Ñï : atom. *)
(* Axiom pred : atom. *)
(* Example nat_example := [{ *)
(*   data ‚Ñï := ùüô + ‚Ñï; *)
(*   def pred : Œ†:‚Ñï, ‚Ñï := \:‚Ñï => case unfold<‚Ñï> 0 of 1 | 0 *)
(* }]. *)

(** * Dynamic semantics *)

(** ** Variable opening  *)
Reserved Notation "'{' k '~>' s '}' e" (in custom oadt at level 20, k constr).
(* NOTE: recursively opening the types is probably not needed for [+] and [inj],
since their type arguments are always public, meaning that no bound variable is
possibly inside them. But I do it anyway for consistency, and possibly in the
future we allow oblivious types inside them. Let's see how this goes. I will
change it if it turns out to be too annoying for proofs. *)
Fixpoint open_ (k : nat) (s : expr) (e : expr) : expr :=
  match e with
  | EBVar n => if decide (k = n) then s else e
  | <{ Œ†:œÑ1, œÑ2 }> => <{ Œ†:{k~>s}œÑ1, {S k~>s}œÑ2 }>
  | <{ \:œÑ => e }> => <{ \:{k~>s}œÑ => {S k~>s}e }>
  | <{ let e1 in e2 }> => <{ let {k~>s}e1 in {S k~>s}e2 }>
  | <{ case e0 of e1 | e2 }> => <{ case {k~>s}e0 of {S k~>s}e1 | {S k~>s}e2 }>
  | <{ ~case e0 of e1 | e2 }> => <{ ~case {k~>s}e0 of {S k~>s}e1 | {S k~>s}e2 }>
  (** Congruence rules *)
  | <{ œÑ1 * œÑ2 }> => <{ ({k~>s}œÑ1) * ({k~>s}œÑ2) }>
  | <{ œÑ1 + œÑ2 }> => <{ ({k~>s}œÑ1) + ({k~>s}œÑ2) }>
  | <{ œÑ1 ~+ œÑ2 }> => <{ ({k~>s}œÑ1) ~+ ({k~>s}œÑ2) }>
  | <{ e1 e2 }> => <{ ({k~>s}e1) ({k~>s}e2) }>
  | <{ sùîπ e }> => <{ sùîπ ({k~>s}e) }>
  | <{ rùîπ e }> => <{ rùîπ ({k~>s}e) }>
  | <{ if e0 then e1 else e2 }> => <{ if {k~>s}e0 then {k~>s}e1 else {k~>s}e2 }>
  | <{ mux e0 e1 e2 }> => <{ mux ({k~>s}e0) ({k~>s}e1) ({k~>s}e2) }>
  | <{ (e1, e2) }> => <{ ({k~>s}e1, {k~>s}e2) }>
  | <{ œÄ@b e }> => <{ œÄ@b ({k~>s}e) }>
  | <{ inj@b<œÑ> e }> => <{ inj@b<({k~>s}œÑ)> ({k~>s}e) }>
  | <{ ~inj@b<œÑ> e }> => <{ ~inj@b<({k~>s}œÑ)> ({k~>s}e) }>
  | <{ fold<X> e }> => <{ fold<X> ({k~>s}e) }>
  | <{ unfold<X> e }> => <{ unfold<X> ({k~>s}e) }>
  | _ => e
  end

where "'{' k '~>' s '}' e" := (open_ k s e) (in custom oadt).

Definition open s t := open_ 0 s t.

Notation "t ^ s" := (open s t) (in custom oadt at level 20).

(** ** Polynomial algebraic data type (Œ±) *)
Inductive padt : expr -> Prop :=
| PUnitT : padt <{ ùüô }>
| PBool : padt <{ ùîπ }>
| PProd Œ±1 Œ±2 : padt Œ±1 -> padt Œ±2 -> padt <{ Œ±1 * Œ±2 }>
| PSum Œ±1 Œ±2 : padt Œ±1 -> padt Œ±2 -> padt <{ Œ±1 + Œ±2 }>
| PGVar (X : atom) : padt X
.
Hint Constructors padt : padt.

(** ** OADT values (œâ) *)
Inductive otval : expr -> Prop :=
| VUnitT : otval <{ ùüô }>
| VOBool : otval <{ ~ùîπ }>
| VProd œâ1 œâ2 : otval œâ1 -> otval œâ2 -> otval <{ œâ1 * œâ2 }>
| VOSum œâ1 œâ2 : otval œâ1 -> otval œâ2 -> otval <{ œâ1 ~+ œâ2 }>
.
Hint Constructors otval : otval.

(** ** Values (v) *)
Inductive val : expr -> Prop :=
| VUnitV : val <{ () }>
| VLit (b : bool) : val <{ b }>
| VPair v1 v2 : val v1 -> val v2 -> val <{ (v1, v2) }>
| VAbs œÑ e : val <{ \:œÑ => e }>
| VInj b œÑ v : val v -> val <{ inj@b<œÑ> v }>
| VFold X v : val v -> val <{ fold<X> v }>
| VBoxedLit (b : bool) : val <{ [b] }>
| VBoxedOInj b œâ v : otval œâ -> val v -> val <{ [inj@b<œâ> v] }>
.
Hint Constructors val : val.

(** ** OADT value typing *)
(** [oval v œâ] means [v] is an oblivious value of oblivious type value [œâ]. This
is essentially a subset of [typing], but we have it so that the dynamic
semantics does not depend on typing. *)
Inductive oval : expr -> expr -> Prop :=
| OVUnitV : oval <{ () }> <{ ùüô }>
| OVOBool b : oval <{ [b] }> <{ ~ùîπ }>
| OVPair v1 v2 œâ1 œâ2 :
    oval v1 œâ1 -> oval v2 œâ2 ->
    oval <{ (v1, v2) }> <{ œâ1 * œâ2 }>
| OVOSum (b : bool) v œâ1 œâ2 :
    oval v (if b then œâ1 else œâ2) ->
    oval <{ [inj@b<œâ1 ~+ œâ2> v] }> <{ œâ1 ~+ œâ2 }>
.
Hint Constructors oval : oval.

(** ** Evaluation context (‚Ñá) *)
(* This style is inspired by Iron Lambda. *)
(** We define evaluation context [‚Ñá] as the hole-filling function. [‚Ñá e] fills
the hole in [‚Ñá] with [e]. [ectx ‚Ñá] asserts that [‚Ñá] is a well-formed
context. *)
Inductive ectx : (expr -> expr) -> Prop :=
(* | CtxTop : ectx (fun e => e) *)
| CtxProd1 œÑ2 : ectx (fun œÑ1 => <{ œÑ1 * œÑ2 }>)
| CtxProd2 œâ1 : otval œâ1 -> ectx (fun œÑ2 => <{ œâ1 * œÑ2 }>)
| CtxOSum1 œÑ2 : ectx (fun œÑ1 => <{ œÑ1 ~+ œÑ2 }>)
| CtxOSum2 œâ1 : otval œâ1 -> ectx (fun œÑ2 => <{ œâ1 ~+ œÑ2 }>)
(** We reduce applications from right to left for some subtle reason. *)
| CtxApp1 e1 : ectx (fun e2 => <{ e1 e2 }>)
| CtxApp2 v2 : val v2 -> ectx (fun e1 => <{ e1 v2 }>)
| CtxLet e2 : ectx (fun e1 => <{ let e1 in e2 }>)
| CtxSec : ectx (fun e => <{ sùîπ e }>)
| CtxRet : ectx (fun e => <{ rùîπ e }>)
| CtxIte e1 e2 : ectx (fun e0 => <{ if e0 then e1 else e2 }>)
| CtxMux1 e1 e2 : ectx (fun e0 => <{ mux e0 e1 e2 }>)
| CtxMux2 v0 e2 : val v0 -> ectx (fun e1 => <{ mux v0 e1 e2 }>)
| CtxMux3 v0 v1 : val v0 -> val v1 -> ectx (fun e2 => <{ mux v0 v1 e2 }>)
| CtxPair1 e2 : ectx (fun e1 => <{ (e1, e2) }>)
| CtxPair2 v1 : val v1 -> ectx (fun e2 => <{ (v1, e2) }>)
| CtxProj b : ectx (fun e => <{ œÄ@b e }>)
| CtxInj b œÑ : ectx (fun e => <{ inj@b<œÑ> e }>)
| CtxCase e1 e2: ectx (fun e0 => <{ case e0 of e1 | e2 }>)
| CtxOInj1 b e : ectx (fun œÑ => <{ ~inj@b<œÑ> e }>)
| CtxOInj2 b œâ : otval œâ -> ectx (fun e => <{ ~inj@b<œâ> e }>)
| CtxOCase e1 e2: ectx (fun e0 => <{ ~case e0 of e1 | e2 }>)
| CtxFold X : ectx (fun e => <{ fold<X> e }>)
| CtxUnfold X : ectx (fun e => <{ unfold<X> e }>)
.
Hint Constructors ectx : ectx.

(** ** Small-step relation *)
Reserved Notation "e '-->!' e'" (at level 40).
Inductive step {Œ£ : gctx} : expr -> expr -> Prop :=
| SCtx ‚Ñá e e' :
    ectx ‚Ñá ->
    e -->! e' ->
    ‚Ñá e -->! ‚Ñá e'
| SApp œÑ e v :
    val v ->
    <{ (\:œÑ => e) v }> -->! <{ e^v }>
| SLet v e :
    val v ->
    <{ let v in e }> -->! <{ e^v }>
| SCase b œÑ v e1 e2 :
    val v ->
    <{ case inj@b<œÑ> v of e1 | e2 }> -->! if b then <{ e1^v }> else <{ e2^v }>
| SOCase b œâ1 œâ2 v e1 e2 v1 v2 :
    otval œâ1 -> otval œâ2 -> val v ->
    oval v1 œâ1 -> oval v2 œâ2 ->
    <{ ~case [inj@b<œâ1 ~+ œâ2> v] of e1 | e2 }> -->!
      EMux <{ [b] }> (if b then <{ e1^v }> else <{ e1^v1 }>)
                     (if b then <{ e2^v2 }> else <{ e2^v }>)
| SAppOADT X œÑ e v :
    Œ£ !! X = Some (DOADT œÑ e) ->
    <{ X v }> -->! <{ e^v }>
| SAppFun x œÑ e :
    Œ£ !! x = Some (DFun œÑ e) ->
    <{ x }> -->! <{ e }>
| SOInj b œâ v :
    otval œâ -> val v ->
    <{ ~inj@b<œâ> v }> -->! <{ [inj@b<œâ> v] }>
| SIte (b : bool) e1 e2 :
    <{ if b then e1 else e2 }> -->! if b then e1 else e2
(** If we also want runtime obliviousness (e.g., against malicious adversaries),
we can check [v1] and [v2] are oblivious values in this rule. *)
| SMux b v1 v2 :
    val v1 -> val v2 ->
    <{ mux [b] v1 v2 }> -->! if b then v1 else v2
| SProj b v1 v2 :
    val v1 -> val v2 ->
    <{ œÄ@b (v1, v2) }> -->! if b then v1 else v2
| SFold X X' v :
    val v ->
    <{ unfold<X> (fold <X'> v) }> -->! v
| SSec (b : bool) :
    <{ sùîπ b }> -->! <{ [b] }>
(** Delimited release [b] *)
| SRet (b : bool) :
    <{ rùîπ [b] }> -->! b

where "e '-->!' e'" := (step e e').
Notation "Œ£ '‚ä¢' e '-->!' e'" := (@step Œ£ e e') (at level 40).
Hint Constructors step : step.

(** * Typing *)

(** ** Security level labels (l) *)
Variant label :=
| LAny
| LPublic
| LSecure
| LMixed
.

Declare Custom Entry oadt_label.
Notation "'A'" := (LAny) (in custom oadt_label at level 0).
Notation "'P'" := (LPublic) (in custom oadt_label at level 0).
Notation "'S'" := (LSecure) (in custom oadt_label at level 0).
Notation "'M'" := (LMixed) (in custom oadt_label at level 0).

(** ** Kinds (Œ∫) *)
Variant kind :=
| KProper (l : label)
| KOADT (œÑ : expr)
.
Declare Custom Entry oadt_kind.
Notation "* @ l" := (KProper l) (in custom oadt_kind at level 0,
                                    l custom oadt_label at level 0,
                                    format "* @ l").
Notation "œÑ '=>' *" := (KOADT œÑ) (in custom oadt_kind at level 0,
                                     œÑ custom oadt at level 99).

(** ** Typing context (Œì) *)
Notation tctx := (amap expr).

(** ** Expression typing *)


(** * Infrastructure *)

(** ** Locally closed *)
Inductive lc : expr -> Prop :=
| LCFVar x : lc (EFVar x)
| LCGVar x : lc (EGVar x)
| LCPi œÑ1 œÑ2 L :
    (forall x, x ‚àâ L -> lc <{ œÑ2^x }>) ->
    lc œÑ1 -> lc <{ Œ†:œÑ1, œÑ2 }>
| LCAbs œÑ e L :
    (forall x, x ‚àâ L -> lc <{ e^x }>) ->
    lc œÑ -> lc <{ \:œÑ => e }>
| LCLet e1 e2 L :
    (forall x, x ‚àâ L -> lc <{ e2^x }>) ->
    lc e1 -> lc <{ let e1 in e2 }>
| LCCase e0 e1 e2 L :
    (forall x, x ‚àâ L -> lc <{ e1^x }>) ->
    (forall x, x ‚àâ L -> lc <{ e2^x }>) ->
    lc e0 -> lc <{ case e0 of e1 | e2 }>
| LCOCase e0 e1 e2 L :
    (forall x, x ‚àâ L -> lc <{ e1^x }>) ->
    (forall x, x ‚àâ L -> lc <{ e2^x }>) ->
    lc e0 -> lc <{ ~case e0 of e1 | e2 }>
(** Congruence rules *)
| LCUnitT : lc <{ ùüô }>
| LCBool : lc <{ ùîπ }>
| LCOBool : lc <{ ~ùîπ }>
| LCProd œÑ1 œÑ2 : lc œÑ1 -> lc œÑ2 -> lc <{ œÑ1 * œÑ2 }>
| LCSum œÑ1 œÑ2 : lc œÑ1 -> lc œÑ2 -> lc <{ œÑ1 + œÑ2 }>
| LCOSum œÑ1 œÑ2 : lc œÑ1 -> lc œÑ2 -> lc <{ œÑ1 ~+ œÑ2 }>
| LCApp e1 e2 : lc e1 -> lc e2 -> lc <{ e1 e2 }>
| LCUnitV : lc <{ () }>
| LCLit b : lc (ELit b)
| LCSec e : lc e -> lc <{ sùîπ e }>
| LCRet e : lc e -> lc <{ rùîπ e }>
| LCIte e0 e1 e2 : lc e0 -> lc e1 -> lc e2 -> lc <{ if e0 then e1 else e2 }>
| LCMux e0 e1 e2 : lc e0 -> lc e1 -> lc e2 -> lc <{ mux e0 e1 e2 }>
| LCPair e1 e2 : lc e1 -> lc e2 -> lc <{ (e1, e2) }>
| LCProj b e : lc e -> lc <{ œÄ@b e }>
| LCInj b œÑ e : lc œÑ -> lc e -> lc <{ inj@b<œÑ> e }>
| LCOInj b œÑ e : lc œÑ -> lc e -> lc <{ ~inj@b<œÑ> e }>
| LCFold X e : lc e -> lc <{ fold<X> e }>
| LCUnfold X e : lc e -> lc <{ unfold<X> e }>
| LCBoxedLit b : lc <{ [b] }>
| LCBoxedOInj b œÑ e : lc œÑ -> lc e -> lc <{ [inj@b<œÑ> e] }>
.
Hint Constructors lc : lc.

(** ** Substitution (for local free variables) *)
Reserved Notation "'{' s '/' x '}' e" (in custom oadt at level 20, x constr).
Fixpoint subst (x : atom) (s : expr) (e : expr) : expr :=
  match e with
  | EFVar y => if decide (x = y) then s else e
  (** Congruence rules *)
  | <{ Œ†:œÑ1, œÑ2 }> => <{ Œ†:{s/x}œÑ1, {s/x}œÑ2 }>
  | <{ \:œÑ => e }> => <{ \:{s/x}œÑ => {s/x}e }>
  | <{ let e1 in e2 }> => <{ let {s/x}e1 in {s/x}e2 }>
  | <{ case e0 of e1 | e2 }> => <{ case {s/x}e0 of {s/x}e1 | {s/x}e2 }>
  | <{ ~case e0 of e1 | e2 }> => <{ ~case {s/x}e0 of {s/x}e1 | {s/x}e2 }>
  | <{ œÑ1 * œÑ2 }> => <{ ({s/x}œÑ1) * ({s/x}œÑ2) }>
  | <{ œÑ1 + œÑ2 }> => <{ ({s/x}œÑ1) + ({s/x}œÑ2) }>
  | <{ œÑ1 ~+ œÑ2 }> => <{ ({s/x}œÑ1) ~+ ({s/x}œÑ2) }>
  | <{ e1 e2 }> => <{ ({s/x}e1) ({s/x}e2) }>
  | <{ sùîπ e }> => <{ sùîπ ({s/x}e) }>
  | <{ rùîπ e }> => <{ rùîπ ({s/x}e) }>
  | <{ if e0 then e1 else e2 }> => <{ if {s/x}e0 then {s/x}e1 else {s/x}e2 }>
  | <{ mux e0 e1 e2 }> => <{ mux ({s/x}e0) ({s/x}e1) ({s/x}e2) }>
  | <{ (e1, e2) }> => <{ ({s/x}e1, {s/x}e2) }>
  | <{ œÄ@b e }> => <{ œÄ@b ({s/x}e) }>
  | <{ inj@b<œÑ> e }> => <{ inj@b<({s/x}œÑ)> ({s/x}e) }>
  | <{ ~inj@b<œÑ> e }> => <{ ~inj@b<({s/x}œÑ)> ({s/x}e) }>
  | <{ fold<X> e }> => <{ fold<X> ({s/x}e) }>
  | <{ unfold<X> e }> => <{ unfold<X> ({s/x}e) }>
  | _ => e
  end

where "'{' s '/' x '}' e" := (subst x s e) (in custom oadt).

(** * Metatheories *)

End lang.

End oadt.
